{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","name","setName","useState","message","setMessage","messages","setMessages","count","setCount","bgColor","setBgColor","darkMode","setDarkMode","loggedIn","setLoggedIn","selectedFile","setSelectedFile","showEmojiPicker","setShowEmojiPicker","React","createElement","style","textAlign","padding","maxWidth","margin","backgroundColor","borderRadius","boxShadow","color","Fragment","onClick","marginBottom","handleLogout","marginLeft","background","type","placeholder","value","onChange","e","target","width","EmojiPicker","onEmojiClick","emoji","sendMessage","trim","newMessage","text","user","time","Date","toLocaleString","file","border","cursor","event","URL","createObjectURL","files","marginTop","map","msg","index","key","src","alt","handleLogin","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1ee69b09.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\n\r\nfunction App() {\r\n  const [name, setName] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n  const [bgColor, setBgColor] = useState(\"#f0f8ff\");\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n\r\n  // User Login\r\n  const handleLogin = () => {\r\n    if (name.trim() !== \"\") {\r\n      setLoggedIn(true);\r\n    }\r\n  };\r\n\r\n  // User Logout\r\n  const handleLogout = () => {\r\n    setLoggedIn(false);\r\n    setName(\"\");\r\n  };\r\n\r\n  // Message Send Function\r\n  const sendMessage = () => {\r\n    if (message.trim() !== \"\") {\r\n      const newMessage = {\r\n        text: message,\r\n        user: name,\r\n        time: new Date().toLocaleString(),\r\n        file: selectedFile,\r\n      };\r\n      setMessages([...messages, newMessage]);\r\n      setMessage(\"\");\r\n      setSelectedFile(null);\r\n      setCount(count + 1);\r\n    }\r\n  };\r\n\r\n  // File Upload Function\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(URL.createObjectURL(event.target.files[0]));\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      textAlign: \"center\",\r\n      padding: \"20px\",\r\n      maxWidth: \"400px\",\r\n      margin: \"auto\",\r\n      backgroundColor: darkMode ? \"#333\" : bgColor,\r\n      borderRadius: \"10px\",\r\n      boxShadow: \"0px 0px 10px gray\",\r\n      color: darkMode ? \"white\" : \"black\"\r\n    }}>\r\n      <h1>ðŸ’¬ Chat App</h1>\r\n\r\n      {!loggedIn ? (\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your name...\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            style={{ width: \"70%\", padding: \"5px\", marginBottom: \"5px\" }}\r\n          />\r\n          <button onClick={handleLogin} style={{ marginLeft: \"5px\", padding: \"5px\", background: \"blue\", color: \"white\" }}>Login</button>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {/* Dark Mode Toggle */}\r\n          <button onClick={() => setDarkMode(!darkMode)} style={{ marginBottom: \"10px\" }}>\r\n            {darkMode ? \"ðŸŒž Light Mode\" : \"ðŸŒ™ Dark Mode\"}\r\n          </button>\r\n          <button onClick={handleLogout} style={{ marginLeft: \"10px\", padding: \"5px\", background: \"red\", color: \"white\" }}>Logout</button>\r\n\r\n          {/* Background Theme Buttons */}\r\n          <div style={{ marginBottom: \"10px\" }}>\r\n            <button onClick={() => setBgColor(\"blue\")} style={{ background: \"blue\", color: \"white\", margin: \"5px\", padding: \"5px\" }}>ðŸ”µ Blue</button>\r\n            <button onClick={() => setBgColor(\"green\")} style={{ background: \"green\", color: \"white\", margin: \"5px\", padding: \"5px\" }}>ðŸŸ¢ Green</button>\r\n            <button onClick={() => setBgColor(\"pink\")} style={{ background: \"pink\", color: \"black\", margin: \"5px\", padding: \"5px\" }}>ðŸŒ¸ Pink</button>\r\n            <button onClick={() => setBgColor(\"black\")} style={{ background: \"black\", color: \"white\", margin: \"5px\", padding: \"5px\" }}>âš« Black</button>\r\n            <button onClick={() => setBgColor(\"#f0f8ff\")} style={{ background: \"gray\", color: \"white\", margin: \"5px\", padding: \"5px\" }}>ðŸ”„ Reset</button>\r\n          </div>\r\n\r\n          {/* Message Input & Send Button */}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            style={{ width: \"70%\", padding: \"5px\" }}\r\n          />\r\n          <button onClick={() => setShowEmojiPicker(!showEmojiPicker)}>ðŸ˜€</button>\r\n          {showEmojiPicker && <EmojiPicker onEmojiClick={(emoji) => setMessage(message + emoji.emoji)} />}\r\n\r\n          <button onClick={sendMessage} style={{ marginLeft: \"5px\", background: \"green\", color: \"white\", border: \"none\", padding: \"5px 10px\", cursor: \"pointer\" }}>Send</button>\r\n\r\n          {/* File Upload */}\r\n          <input type=\"file\" onChange={handleFileChange} style={{ marginTop: \"10px\" }} />\r\n\r\n          {/* Message Counter */}\r\n          <h3>ðŸ“© Messages Sent: {count}</h3>\r\n\r\n          {/* Messages List */}\r\n          <div style={{ marginTop: \"20px\", textAlign: \"left\" }}>\r\n            {messages.map((msg, index) => (\r\n              <div key={index} style={{\r\n                background: msg.user === name ? \"#d1e7dd\" : \"#f8d7da\",\r\n                padding: \"10px\",\r\n                borderRadius: \"5px\",\r\n                marginBottom: \"5px\"\r\n              }}>\r\n                <span><strong>{msg.user}</strong>: {msg.text} <small>({msg.time})</small></span>\r\n                {msg.file && <img src={msg.file} alt=\"uploaded\" style={{ width: \"100px\", marginTop: \"5px\" }} />}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}